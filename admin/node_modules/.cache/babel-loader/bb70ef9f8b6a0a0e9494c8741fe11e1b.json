{"ast":null,"code":"/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n  if (input instanceof Date) return input;\n  // @ts-ignore\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\n  input = (input || ''\n  // @ts-ignore\n  ).trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n  return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n  /**\n   * if locale is not exist, use defaultLocale.\n   * if defaultLocale is not exist, use build-in `en`.\n   * be sure of no error when locale is not exist.\n   *\n   * If `time in`, then 1\n   * If `time ago`, then 0\n   */\n  var agoIn = diff < 0 ? 1 : 0;\n  /**\n   * Get absolute value of number (|diff| is non-negative) value of x\n   * |diff| = diff if diff is positive\n   * |diff| = -diff if diff is negative\n   * |0| = 0\n   */\n  diff = Math.abs(diff);\n  /**\n   * Time in seconds\n   */\n  var totalSec = diff;\n  /**\n   * Unit of time\n   */\n  var idx = 0;\n  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n    diff /= SEC_ARRAY[idx];\n  }\n  /**\n   * Math.floor() is alternative of ~~\n   *\n   * The differences and bugs:\n   * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n   * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n   *\n   * More information about the performance of algebraic:\n   * https://www.youtube.com/watch?v=65-RbBwZQdU\n   */\n  diff = Math.floor(diff);\n  idx *= 2;\n  if (diff > (idx === 0 ? 9 : 1)) idx += 1;\n  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n  var relDate = relativeDate ? toDate(relativeDate) : new Date();\n  return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n  var rst = 1,\n    i = 0,\n    d = Math.abs(diff);\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n}","map":{"version":3,"sources":["../../src/utils/date.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [\n    60,\n    60,\n    24,\n    7,\n    365 / 7 / 12,\n    12,\n];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\nexport function toDate(input) {\n    if (input instanceof Date)\n        return input;\n    // @ts-ignore\n    if (!isNaN(input) || /^\\d+$/.test(input))\n        return new Date(parseInt(input));\n    input = (input || '')\n        // @ts-ignore\n        .trim()\n        .replace(/\\.\\d+/, '') // remove milliseconds\n        .replace(/-/, '/')\n        .replace(/-/, '/')\n        .replace(/(\\d)T(\\d)/, '$1 $2')\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n    return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\nexport function formatDiff(diff, localeFunc) {\n    /**\n     * if locale is not exist, use defaultLocale.\n     * if defaultLocale is not exist, use build-in `en`.\n     * be sure of no error when locale is not exist.\n     *\n     * If `time in`, then 1\n     * If `time ago`, then 0\n     */\n    var agoIn = diff < 0 ? 1 : 0;\n    /**\n     * Get absolute value of number (|diff| is non-negative) value of x\n     * |diff| = diff if diff is positive\n     * |diff| = -diff if diff is negative\n     * |0| = 0\n     */\n    diff = Math.abs(diff);\n    /**\n     * Time in seconds\n     */\n    var totalSec = diff;\n    /**\n     * Unit of time\n     */\n    var idx = 0;\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n        diff /= SEC_ARRAY[idx];\n    }\n    /**\n     * Math.floor() is alternative of ~~\n     *\n     * The differences and bugs:\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\n     *\n     * More information about the performance of algebraic:\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\n     */\n    diff = Math.floor(diff);\n    idx *= 2;\n    if (diff > (idx === 0 ? 9 : 1))\n        idx += 1;\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns {number}\n */\nexport function diffSec(date, relativeDate) {\n    var relDate = relativeDate ? toDate(relativeDate) : new Date();\n    return (+relDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\nexport function nextInterval(diff) {\n    var rst = 1, i = 0, d = Math.abs(diff);\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n        diff /= SEC_ARRAY[i];\n        rst *= SEC_ARRAY[i];\n    }\n    d = d % rst;\n    d = d ? rst - d : rst;\n    return Math.ceil(d);\n}\n//# sourceMappingURL=date.js.map"]},"metadata":{},"sourceType":"module"}