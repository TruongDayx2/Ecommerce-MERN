{"ast":null,"code":"import { setTimerId, getTimerId, getDateAttribute } from './utils/dom';\nimport { formatDiff, diffSec, nextInterval } from './utils/date';\nimport { getLocale } from './register';\n// all realtime timer\nvar TIMER_POOL = {};\n/**\n * clear a timer from pool\n * @param tid\n */\nvar clear = function (tid) {\n  clearTimeout(tid);\n  delete TIMER_POOL[tid];\n};\n// run with timer(setTimeout)\nfunction run(node, date, localeFunc, opts) {\n  // clear the node's exist timer\n  clear(getTimerId(node));\n  var relativeDate = opts.relativeDate,\n    minInterval = opts.minInterval;\n  // get diff seconds\n  var diff = diffSec(date, relativeDate);\n  // render\n  node.innerText = formatDiff(diff, localeFunc);\n  var tid = setTimeout(function () {\n    run(node, date, localeFunc, opts);\n  }, Math.min(Math.max(nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff));\n  // there is no need to save node in object. Just save the key\n  TIMER_POOL[tid] = 0;\n  setTimerId(node, tid);\n}\n/**\n * cancel a timer or all timers\n * @param node - node hosting the time string\n */\nexport function cancel(node) {\n  // cancel one\n  if (node) clear(getTimerId(node));\n  // cancel all\n  // @ts-ignore\n  else Object.keys(TIMER_POOL).forEach(clear);\n}\n/**\n * render a dom realtime\n * @param nodes\n * @param locale\n * @param opts\n */\nexport function render(nodes, locale, opts) {\n  // by .length\n  // @ts-ignore\n  var nodeList = nodes.length ? nodes : [nodes];\n  nodeList.forEach(function (node) {\n    run(node, getDateAttribute(node), getLocale(locale), opts || {});\n  });\n  return nodeList;\n}","map":{"version":3,"sources":["../src/realtime.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,EAAE,UAAU,EAAE,gBAAgB,QAAQ,aAAa;AACtE,SAAS,UAAU,EAAE,OAAO,EAAE,YAAY,QAAQ,cAAc;AAChE,SAAS,SAAS,QAAQ,YAAY;AAGtC;AACA,IAAM,UAAU,GAAc,CAAA,CAAE;AAEhC;;;AAGG;AACH,IAAM,KAAK,GAAG,UAAC,GAAW,EAAA;EACxB,YAAY,CAAC,GAAG,CAAC;EACjB,OAAO,UAAU,CAAC,GAAG,CAAC;AACxB,CAAC;AAED;AACA,SAAS,GAAG,CAAC,IAAiB,EAAE,IAAY,EAAE,UAAsB,EAAE,IAAU,EAAA;EAC9E;EACA,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;EAEf,IAAA,YAAA,GAAA,IAAA,CAAA,YAAY;IAAE,WAAA,GAAA,IAAA,CAAA,WAAW;EAEjC;EACA,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC;EACxC;EACA,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC;EAE7C,IAAM,GAAG,GAAI,UAAU,CAAC,YAAA;IACtB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC;EACnC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,WAAW,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,UAAU,CAAC,CAAuB;EAErG;EACA,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC;EACnB,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;AACvB;AAEA;;;AAGG;AACH,OAAM,SAAU,MAAM,CAAC,IAAkB,EAAA;EACvC;EACA,IAAI,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;EACjC;EACA;EAAA,KACK,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;AAC7C;AAEA;;;;;AAKG;AACH,OAAM,SAAU,MAAM,CAAC,KAA6C,EAAE,MAAe,EAAE,IAAW,EAAA;EAChG;EACA;EACA,IAAM,QAAQ,GAAkB,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC;EAE9D,QAAQ,CAAC,OAAO,CAAC,UAAC,IAAiB,EAAA;IACjC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAA,CAAE,CAAC;EAClE,CAAC,CAAC;EAEF,OAAO,QAAQ;AACjB","sourceRoot":"","sourcesContent":["import { setTimerId, getTimerId, getDateAttribute } from './utils/dom';\nimport { formatDiff, diffSec, nextInterval } from './utils/date';\nimport { getLocale } from './register';\n// all realtime timer\nvar TIMER_POOL = {};\n/**\n * clear a timer from pool\n * @param tid\n */\nvar clear = function (tid) {\n    clearTimeout(tid);\n    delete TIMER_POOL[tid];\n};\n// run with timer(setTimeout)\nfunction run(node, date, localeFunc, opts) {\n    // clear the node's exist timer\n    clear(getTimerId(node));\n    var relativeDate = opts.relativeDate, minInterval = opts.minInterval;\n    // get diff seconds\n    var diff = diffSec(date, relativeDate);\n    // render\n    node.innerText = formatDiff(diff, localeFunc);\n    var tid = setTimeout(function () {\n        run(node, date, localeFunc, opts);\n    }, Math.min(Math.max(nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff));\n    // there is no need to save node in object. Just save the key\n    TIMER_POOL[tid] = 0;\n    setTimerId(node, tid);\n}\n/**\n * cancel a timer or all timers\n * @param node - node hosting the time string\n */\nexport function cancel(node) {\n    // cancel one\n    if (node)\n        clear(getTimerId(node));\n    // cancel all\n    // @ts-ignore\n    else\n        Object.keys(TIMER_POOL).forEach(clear);\n}\n/**\n * render a dom realtime\n * @param nodes\n * @param locale\n * @param opts\n */\nexport function render(nodes, locale, opts) {\n    // by .length\n    // @ts-ignore\n    var nodeList = nodes.length ? nodes : [nodes];\n    nodeList.forEach(function (node) {\n        run(node, getDateAttribute(node), getLocale(locale), opts || {});\n    });\n    return nodeList;\n}\n//# sourceMappingURL=realtime.js.map"]},"metadata":{},"sourceType":"module"}